/**
 * Грубо ремонтирует повреждённую геометрию полигонов. Рекурсивная функция.
 * Вызывается очень часто (рендеринг стилей), поэтому сделана так, чтобы отработать как можно быстрее.
 * Рассчитана на то, что геометрия повреждается за счёт выхода за пределы обзора и не обрабатывает
 * все возможные ошибки. Главное, чтобы соблюдались формальные требования.
 * Если кольцо полигона состоит менее, чем из 3 точек, дополняет его дополнительными точками с
 * минимальным смещением.
 * Если кольцо не замкнуто, замыкает его.
 *
 * @param coordinates - координаты геометрии
 */
export function fixPolygonRings(coordinates) {
  const deltas = [
    [0.0001, 0],
    [0, 0.0001],
    [-0.0001, 0],
  ]

  if (typeof coordinates !== 'number') {
    // Координаты точки не трогаем
    if (Array.isArray(coordinates[0])) {
      // Координаты полилинии или сложнее
      if (Array.isArray(coordinates[0][0])) {
        // Координаты полигона или сложнее проверяем рекурсивно
        for (const item of coordinates) {
          fixPolygonRings(item)
        }
      } else {
        // Здесь, исходя из проверок выше, мы чётко уверены, что координаты — это координаты полилинии.
        const coords = coordinates
        // Кольцо полигона должно состоять не менее, чем из 4 точек. Если не так, дополняем.
        const len = coords.length
        if (len > 0 && len < 4) {
          for (let i = len; i < 4; i++) {
            const [x, y] = coords[i - 1]
            const delta = deltas[4 - i - 1]
            coords.push([x + delta[0], y + delta[1]])
          }
        }
        // Последняя точка должна совпадать с первой. Если не так, дублируем первую.
        const first = coords[0]
        const last = coords[coords.length - 1]
        if (first[0] !== last[0] || first[1] !== last[1]) {
          coords.push([first[0], first[1]])
        }
      }
    }
  }
}
